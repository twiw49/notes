cd ~                          	
cd ..
cd [folder_name]           		 	
mkdir [folder_name] 	        	
subl test.txt 			: launch sublime with file called test.txt 

pwd 								: print working directory - shows what directory you are in
ls  								: list the files in this directory
ls -a
ls -al

// 파일 생성
echo "<html> </html>" > [file_name]
touch [file_name]

// 파일 확인
cat [file_name]

// 파일 or 폴더 삭제
: rm -rf [folder or file name]

// git 설정
git --version
git config ­­global user.name [Your name]
git config ­­global user.email [youremail@domain.com]
git config --global --list				: config 설정 확인

// git init		
git init								: 현재 존재하는 폴더 내에 .git 폴더 생성
git init [folder_name] 	: [folder_name] 폴더가 생성되고 그 폴더 안에 .git 폴더 생성

// gitignore 
: .gitignore 파일을 vim을 이용해 생성하여,
: staging or commit할 때 무시할 파일 및 폴더 목록들을 작성
	vim .gitignore (vim => a/i/o : insert // esc 후 :wq 저장)
		.DS_Store
		*.log
		*.iml
		temp/
: github에서 repository를 처음 생성할 때 설정할 수도 있음

// git init [project_name]
Creates a new local repository with the specified name

// git add 
git add [file_name] 	: 특정 파일 staging
git add . 						: 모든 파일 staging
git add -i 						: interactive 하게 staging

// git reset
git reset [file] 			
	: Unstage the file, but preserve its contents
	: 특정 파일을 staging area 에서 working directory 로 되돌리기 / 변경 사항은 보존
git reset [commit]
	: Undoes all commits after [commit], preserving changes locally 
git reset --hard [commit]
	: Discards all history and changes back to the specified commit
git reset --hard
	: delete changes in working directory or staging area (any changes which are not yet commited)

// git rm
git rm [file]
	: Deletes the file from the working directory and stages
	: 특정 파일을 실제로 삭제함
	: 파일 삭제 후 git commit 실행하여 update (git add 할 필요 없음)
git rm --cached [file]			: 특정 파일
git rm -r --cached .				: 모든 파일
	: Git 에서는 지우고 싶은데, 지금 작업할 때에는 남겨두고 싶은 경우
	: 즉, 지금 당장 파일은 지우기 싫은데, git 에서는 삭제를 해놓고 싶은 경우
	: 실제 파일은 삭제가 되지 않았고, 그러다 보니 git 에서는 untracked 파일이 존재하고 있다고 인지하고 있게 됨

// git commit
git commit 		
git commit -m
git commit -a -m 			: commit을 이전에 했던 파일들을 다시 commit해야 하는 경우(modified) staging 단계와 commit 단계를 한꺼번에 실행

// git log
git log
git log -n [number] 	: 최근 몇 개의 로그만 보여줌
git log --oneline --decorate --graph --all
git log --stat 				: 변화 통계치 보여줌
git log [file_name]		: 특정 파일의 commit 

// git diff
git diff  														: comparing working directory and staging area
																			: modified changes which are not yet staged
git diff --staged											: comparing staging area and the most recent commit
git diff [commit_id] 									: 현재 working directory와 특정 커밋과의 차이점 비교
git diff [commit_id] -- [file_name]	  : 특정 파일에 대해 특정 커밋과 현재의 차이점 비교
git diff [commit_id_1] [commit_id_2]  : 두 커밋 간의 차이점 비교
git show [commit_id] 									: 특정 commit과 그 parent와의 비교

diff -u [file_1] [file_2]							: file_1과 file_2의 차이점 비교

// git branch
git branch 										: branch 조회
git branch -a 								: 모든 branch 조회
git branch [branch_name]			: branch 생성
git branch -d [branch_name]		: branch 삭제
git branch -m [branch_name] [new_branch_name]		: branch 이름 변경

// git checkout
git checkout [branch_name]			: 특정 branch로 working-directory 변경
git checkout [commit_id]				: 특정 commit으로 working-directory 변경
git checkout -- [file_name]			: 특정 파일을 현재 branch의 마지막 커밋 상태로 변경
git checkout [branch_name or commit_id] -- [file_name] : 특정 파일을 특정 branch or commit 상태로 변경

// git merge
git checkout master 		: master 브랜치로 working directory 이동
git merge [branch_name]	: master 브랜치에 branch를 병합
=> merge가 안 되는 경우 : 
=> 두 개 브랜치의 부모 커밋 / 두 개 브랜치들의 가장 최신 커밋들
=> 같은 파일의 같은 부분 
=> 부모 커밋과 두 개 브랜치들의 가장 최신 커밋들이 모두 다른 경우

EX) branch_2 를 branch_1 에 합치려는 상황 
git checkout [branch_1]
	: merge 하려는 두 개의 branch들 중 하나로 checkout 해야 함
	: 그 중에서도 계속 이어나가고자 하는 branch 로!!
git merge [branch_1] [branch_2]			OR 		 git merge [branch_2]
	: The key is to remember that git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch.))
git branch -d [branch_2]  
	: branch_2 삭제 

// merge conflict
=> 해당 파일 (both modified)를 열어서 직접 수정
=> 수정 후 add / commit 하게 되면 merge 완성

GITHUB
// git remote add [alias] [url]			: 로컬 저장소에 원격 저장소 URL을 등록
=> 로컬 저장소에서 git init 후에 git remote add 실행
=> git remove -v 										: 등록한 alias와 URL 확인

// git fetch												: 원격 저장소에 있는 내용을 로컬로 받음
git fetch [alias] [branch]
=> 원격 저장소에 있는 내용을 로컬의 [alias]/[branch] branch에 받음
=> 로컬의 해당 branch는 변함 없음

// git pull 				
git pull [alias] [branch]
: 원격 저장소에 있는 내용을 로컬로 받고, 로컬의 해당 branch와 병합
: 원격 저장소의 branch와 동일한 이름의 branch가 로컬 저장소에도 있어야함

// 로컬저장소에 없고 원격 저장소에만 있는 브랜치를 가져오고자 할 때
git fetch origin
git checkout --track origin/{branch_name}
	: fetch 명령으로 우선 원격 저장소의 변경사항을 로컬 저장소로 받음
	: fetch 해야만 새로운 브랜치가 추가 됐는지를 확인 가능 (git branch -a)
	: 두 번째 명령으로 원격 브랜치의 내용을 로컬브랜치로 생성하여 체크아웃함

// github 의 origin/master branch 에서 new commit 한 상태 => local에 어떻게 적용하나?
git pull origin master = git fetch origin master + git merge origin/master 
	: master branch 보다 origin/master branch가 한 단계 더 앞 선 상태에서 master branch에 병합됨
	: master branch의 tip point가 한 단계 앞으로 이동하면서 origin/master branch와 동일하게 됨

// git push 				
git push [alias] [branch]
: 로컬 저장소에 있는 내용을 원격 저장소에 업로드
: 로컬 저장소에 있는 브랜치와 동일한 이름의 브랜치가 원격 저장소에 없는 경우, 새로 생성됨

전체 순서
: 새로운 폴더에서 git init 실행
: 파일 생성 
: git add 									: staging
: git commit 								: commit
: github에서 new repository 생성
: git remote add origin URL : 원격저장소 정보 등록 (원격저장소의 별명을 origin으로 설정)
: git push origin master		: 원격저장소로 upload

// git clone				: 공개된 원격 저장소의 repository 전체를 로컬로 다운로드 받음
git clone [url]			
: 원격 저장소의 repository 이름으로 폴더 생성 / 그 폴더로 이동해서 작업 수행

// pull request 		
: 내가 사용하는 오픈 소스에 버그가 있는 경우
: 신규 기능을 추가하고 싶은 경우 
=> 그것을 직접 한 후 원작자에게 반영 요청을 할 때 사용

단계
: fork (원작자의 원격 저장소에서 나의 원격 저장소로 복제)
: clone (나의 원격 저장소에서 나의 로컬 저장소로 다운로드)
: branch (master branch에서 develop branch 또는 작업을 할 다른 branch를 생성)
: checkout (작업할 branch로 이동)  // git checkout -b [branch_name] : br 생성 후 이동
: source change
: commit (변경한 소스를 로컬 저장소에 저장)
: push (로컬 저장소에서 나의 원격 저장소로 업로드)  // git push origin develop
(develop branch에서 작업을 하였고, 수정 사항은 develop branch에 저장되어 있기 때문에 로컬 저장소의 develop branch를 원격 저장소의 develop branch로 업로드 / 원격 저장소에 해당 이름의 브랜치가 없다면 새로 생성됨)
: pull request (변경 사항을 원작자가 원본 소스에 반영하도록 요청)
	base fork / base(branch) : 원작자
	head fork / compare(branch) : 본인(수정자)
	Create pull request


< Merge Conflict Example >
// local 에서 새로운 branch 생성해서 new commit + local 의 master branch 에서 new commit
	: 두 개 브랜치들의 부모 commit과 두 commmit 간에 서로 같은 파일의 같은 부분이 모두 다를 경우, 
	: merge 실행 시 merge conflict 발생 

// local 의 master branch 에서 new commit + github 의 origin/master branch 에서 new commit 한 경우
git fetch origin master
	: git fetch origin master 실행 후 origin/master branch와 master branch가 갈라짐 
		: 확인 by git log --graph --all --oneline
	: 두 개 브랜치들의 부모 commit과 두 commmit 간에 서로 같은 파일의 같은 부분이 모두 다를 경우, 
	: merge 실행 시 merge conflict 발생
master branch 로 checkout 된 상태에서,
git merge master origin/master
: origin/master branch 를 master branch 로 병합

// pull request conflict
	: 원작자의 동일한 commit에 대한 서로 다른 pull request를 두 사람 이상이 동시에 한 경우
	: 같은 파일의 같은 부분을 다르게 수정하여 pull request를 동시에 한 경우 conflict 발생
해결방법
: 다른 사람의 pull request를 받아들임 
	: github의 origin/master branch와 다른 사람의 requested_branch를 병합 
: 다른 사람의 requested_branch를 삭제
: (local 에서) git pull origin master 
	: gitgub의 origin/master branch가 local의 master branch와 병합
: git checkout my_reqeusted_branch
: git merge master 
	: my_requested_branch에 master branch를 병합
	: merge conflict 발생
	: 파일 수정 
	: git add [file_name]
	: git commit
: git push origin my_requested_branch
: github 에서 my_requested_branch 를 다시 pull request 함